name: Update Good Servers List # Название вашего workflow, отображается в GitHub Actions

on:
  schedule:
    # Запускать каждые 2 часа (0 минут, каждый 2-й час, каждый день, каждый месяц, каждый день недели)
    # Подробнее про cron: https://crontab.guru/
    - cron: '0 */2 * * *'
  workflow_dispatch: # Эта строчка позволяет запускать workflow вручную из интерфейса GitHub Actions

permissions: # <--- ДОБАВЛЕНО: Разрешения для workflow
  contents: write  # <--- Необходимо для git push

jobs:
  build_and_update_list:
    runs-on: windows-latest # Используем Windows, т.к. у вас xray.exe
    concurrency: # <--- ДОБАВЛЕНО: Настройка параллелизма
      group: ${{ github.workflow }}-${{ github.ref }} # Группа уникальна для этого workflow и ветки
      cancel-in-progress: false # Новый запуск будет ждать, а не отменять текущий

    steps:
      # 1. Клонируем ваш репозиторий, чтобы получить доступ к скрипту и xray.exe
      - name: Checkout repository
        uses: actions/checkout@v4 # Используем официальный action для клонирования

      # 2. Устанавливаем Python нужной версии
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Укажите версию Python, которую используете (например, 3.8, 3.9, 3.10, 3.11)

      # 3. Устанавливаем зависимости Python для вашего скрипта
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests[socks] pyyaml

      # 4. Запускаем ваш Python-скрипт
      # Замените 'check_servers.py' на реальное имя вашего файла, если оно другое
      - name: Run server check script
        env:
          PYTHONIOENCODING: "UTF-8"
        run: python check_servers.py # Убедитесь, что имя файла 'check_servers.py' верное

      # 5. Коммитим и пушим изменения (если они есть)
      - name: Commit and push if changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add *_good_servers.yml *_good_servers.txt
          
          # Выполняем git diff и проверяем статус его выполнения ($?)
          # git diff --staged --quiet вернет 0 (успех, $? будет $true), если нет изменений для коммита.
          # И вернет 1 (неудача, $? будет $false), если есть изменения.
          git diff --staged --quiet 
          if (-not $?) { # Если последняя команда НЕ завершилась успешно (т.е. БЫЛИ изменения)
            git commit -m "Automated update: good server lists"
            git push
          } else {
            echo "No changes to commit for good server lists."
          }